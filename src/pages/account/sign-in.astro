---
import ToastNotification from "@components/utilities/ToastNotification.astro";
import MainHead from "@layouts/MainHead.astro";
import Icon from "astro-icon";
import { Image } from "astro:assets";
---

<!doctype html>
<html lang="en">
  <MainHead
    title="Sign in & Sign up Form"
    description="A page where the user signs in his account or signs up for an account"
  />

  <script src="https://accounts.google.com/gsi/client" async defer></script>

  <body>
    <div class="container">
      <dialog id="forgotPasswordModal" class="forgotPasswordModal">
        <form id="forgotPasswordForm" class="forgotPasswordForm">
          <label for="email">Enter your E-mail Address:</label>
          <input type="email" id="email" name="email" class="email" required />
          <button type="submit">Submit</button>
        </form>
        <button
          id="closeForgotPasswordModal"
          type="button"
          onclick="closeForgotPasswordModal()">Close</button
        >
      </dialog>
      <div class="signin-signup">
        <form class="sign-in-form">
          <h2 class="title">Sign in</h2>
          <div class="input-field">
            <Icon name="mdi:account" />
            <input
              type="text"
              placeholder="Username"
              id="sign-in-username"
              autocomplete="off"
            />
          </div>
          <div class="input-field">
            <Icon name="mdi:shield-lock" />
            <input
              type="password"
              placeholder="Password"
              id="sign-in-password"
              autocomplete="off"
            />
            <button type="button" class="view-pass" title="View Password">
              <Icon name="mdi:eye-circle" class="eye" />
            </button>
          </div>

          <button type="button" class="forgot-btn">Forgot your password?</button
          >

          <input type="submit" value="Login" class="btn solid" />
          <p class="social-text">Or Sign in with Google</p>
          <div class="social-media">
            <div
              id="g_id_onload"
              data-client_id="1046911821709-9tm6k2d2ucbghu4h8ab2iei6evlgdt8q.apps.googleusercontent.com"
              data-context="signin"
              data-ux_mode="popup"
              data-callback="handleCredentialResponse"
              data-nonce=""
              data-itp_support="true">
            </div>

            <div
              class="g_id_signin"
              data-type="standard"
              data-shape="pill"
              data-theme="filled_black"
              data-text="signin_with"
              data-size="large"
              data-locale="en"
              data-logo_alignment="left"
              data-width="100">
            </div>
          </div>
        </form>
        <form class="sign-up-form">
          <h2 class="title | sign-up-title">Sign up</h2>
          <div class="input-field">
            <Icon name="mdi:account" />
            <input
              type="text"
              placeholder="Username"
              id="sign-up-username"
              autocomplete="off"
            />
          </div>
          <div class="input-field">
            <Icon name="mdi:email" />
            <input
              type="email"
              placeholder="Email"
              id="sign-up-email"
              autocomplete="off"
            />
          </div>
          <div class="input-field">
            <Icon name="mdi:shield-lock" />
            <input
              type="password"
              placeholder="Password"
              id="sign-up-password"
              autocomplete="off"
              minlength="8"
            />
            <button type="button" class="view-pass" title="View Password">
              <Icon name="mdi:eye-circle" class="eye" />
            </button>
          </div>
          <div class="recommendations">
            <p class="length">At least 8 characters long</p>
            <p class="variety">Has an uppercase letter and a number</p>
          </div>
          <div class="password-generator">
            <div class="input-field">
              <Icon name="mdi:shield-lock" />
              <input
                type="text"
                readonly
                placeholder="Password Generator"
                autocomplete="off"
                id="generate-input"
              />
              <button
                type="button"
                id="copy-btn"
                class="copy-btn"
                title="Copy Password"
                data-notification-btn>
                <Icon name="mdi:content-copy" />
              </button>
            </div>
            <input
              type="button"
              value="Generate"
              class="btn transparent"
              id="generate-btn"
            />
          </div>
          <div class="range-box">
            <label for="range"></label>
            <input
              id="range"
              name="range"
              type="range"
              min="8"
              max="14"
              value="8"
            />
            <span class="slider-number">8</span>
          </div>
          <input
            type="submit"
            class="btn"
            value="Sign up"
            id="form-sign-up-btn"
          />
          <p class="social-text | sign-up-text">Or Sign up with Google</p>
          <div class="social-media">
            <div
              class="g_id_signin"
              data-type="standard"
              data-shape="pill"
              data-theme="filled_black"
              data-text="signup_with"
              data-size="large"
              data-locale="en"
              data-logo_alignment="left"
              data-width="100">
            </div>
          </div>
        </form>
      </div>
      <ToastNotification />

      <div class="panels-container">
        <div class="panel left-panel">
          <div class="content">
            <h3>New here ?</h3>
            <p>Sign up now and start exploring the world of tech with us!</p>
            <button class="btn transparent" id="sign-up-btn">Sign up</button>
          </div>
          <Image
            width={500}
            height={500}
            src="/spaceship.svg"
            loading="eager"
            class="image"
            alt="svg showing a man near a spaceship "
          />
        </div>
        <div class="panel right-panel">
          <div class="content">
            <h3>One of us ?</h3>
            <p>
              Welcome back! Login to access your account and continue your
              journey.
            </p>
            <button class="btn transparent" id="sign-in-btn">Sign in</button>
          </div>
          <Image
            width={500}
            height={500}
            src="/computer.svg"
            class="image"
            alt="svg showing a woman on a computer"
            loading="eager"
          />
        </div>
      </div>
    </div>
    <script is:inline>
      const modal = document.getElementById("forgotPasswordModal");
      const forgotForm = document.querySelector(".forgotPasswordForm");

      function closeForgotPasswordModal() {
        modal.close();
        forgotForm.reset();
      }
      async function handleCredentialResponse(CredentialResponse) {
        try {
          const jwtToken = CredentialResponse.credential;
          const response = await fetch(
            "/api/users/GoogleLogin/decodeGoogleCredentials",
            {
              method: "POST",
              headers: {
                "Content-Type": "application/json",
              },
              body: JSON.stringify({ jwtToken }),
            }
          );
          if (!response.ok) {
            const message = await response.json();
            alert(`Error: ${message.error}`);
          }
          const data = await response.json();
          let { isLoggedIn, user_uuid, message } = data;
          localStorage.setItem("isLoggedIn", `${isLoggedIn}`);
          const wishListResponse = await fetch(
            `/api/wishlist/loadUserWishlist/${user_uuid}`,
            {
              method: "GET",
            }
          );

          const wishListProducts = await wishListResponse.json();
          const productUuids = wishListProducts.map(
            (wishListProduct) => wishListProduct.product_uuid
          );
          localStorage.setItem("wishlist", JSON.stringify(productUuids));
          message !== undefined ? alert(message) : undefined;
          const cartResponse = await fetch(
            `/api/shopping_cart/loadUserCart/${user_uuid}`,
            {
              method: "GET",
            }
          );

          const cartProducts = await cartResponse.json();
          const productCartUuids = cartProducts.map(
            (wishListProduct) => wishListProduct.product_uuid
          );
          localStorage.setItem(
            "shopping_cart",
            JSON.stringify(productCartUuids)
          );
          location.href = location.origin;
        } catch (error) {
          console.error(error);
        }
      }
    </script>

    <script>
      import { validateEmail } from "src/scripts/validateEmail";
      // forgot your password functionality
      const modal = document.getElementById(
        "forgotPasswordModal"
      ) as HTMLDialogElement;
      const forgotForm = document.querySelector(
        ".forgotPasswordForm"
      ) as HTMLFormElement;
      const forgotPasswordBtn = document.querySelector(
        ".forgot-btn"
      ) as HTMLButtonElement;
      const emailInput = document.querySelector(".email") as HTMLInputElement;
      forgotPasswordBtn.addEventListener("click", () => {
        modal.showModal();
      });
      forgotForm.addEventListener("submit", async (e: Event) => {
        e.preventDefault();
        if (!validateEmail(emailInput.value))
          return alert(`${emailInput.value} is not a valid email`);
        const response = await fetch(`/api/users/getUser/${emailInput.value}`, {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({ userEmail: emailInput.value }),
        });

        if (!response.ok) {
          const message = await response.json();
          alert(`Error: ${message.error}`);
          forgotForm.reset();
          return;
        }
        localStorage.setItem("email", emailInput.value);
        location.href = "/account/otp?fp";
      });

      // sign up/ sign in functionality
      document.addEventListener("astro:page-load", () => {
        const sign_in_btn = document.querySelector(
          "#sign-in-btn"
        ) as HTMLElement;
        const sign_up_btn = document.querySelector(
          "#sign-up-btn"
        ) as HTMLElement;
        const signUpForm = document.querySelector(
          ".sign-up-form"
        ) as HTMLFormElement;
        const signInForm = document.querySelector(
          ".sign-in-form"
        ) as HTMLFormElement;
        const passwordInputs = document.querySelectorAll(
          "input[type=password]"
        ) as NodeListOf<HTMLInputElement>;

        const viewPassButtons = document.querySelectorAll(
          ".view-pass"
        ) as NodeListOf<HTMLButtonElement>;
        const container = document.querySelector(".container") as HTMLElement;
        const signUpUsernameInput = document.querySelector(
          "#sign-up-username"
        ) as HTMLInputElement;
        const signUpPasswordInput = document.querySelector(
          "#sign-up-password"
        ) as HTMLInputElement;
        const signUpEmailInput = document.querySelector(
          "#sign-up-email"
        ) as HTMLInputElement;
        if (!signUpForm || !signInForm) return;
        signUpPasswordInput.addEventListener("input", () => {
          const passwordVarietyText = document.querySelector(
            ".variety"
          ) as HTMLElement;
          const passwordLengthText = document.querySelector(
            ".length"
          ) as HTMLElement;
          // Check if the requirements are met
          const hasCapital = /[A-Z]/.test(signUpPasswordInput.value);
          const hasNumber = /[0-9]/.test(signUpPasswordInput.value);
          hasCapital && hasNumber
            ? passwordVarietyText.classList.add("strike")
            : passwordVarietyText.classList.remove("strike");
          signUpPasswordInput.value.length >= 8
            ? passwordLengthText.classList.add("strike")
            : passwordLengthText.classList.remove("strike");
        });

        // Sign up form
        signUpForm.addEventListener("submit", async (e: Event) => {
          e.preventDefault();
          const hasCapital = /[A-Z]/.test(signUpPasswordInput.value);
          const hasNumber = /[0-9]/.test(signUpPasswordInput.value);
          if (
            signUpUsernameInput.value === "" ||
            signUpPasswordInput.value === ""
          )
            return alert("Enter the remaining information");
          if (signUpPasswordInput.value.length < 8)
            return alert("Password must contain at least 8 characters");
          if (!hasCapital)
            return alert(
              "Password must contain at least one capitalized letter"
            );
          if (!hasNumber)
            return alert("Password must contain at least one number");
          if (!validateEmail(signUpEmailInput.value))
            return alert(
              `${signUpEmailInput.value} is not a valid email adress!`
            );
          const user = {
            username: signUpUsernameInput.value,
            password: signUpPasswordInput.value,
            email: signUpEmailInput.value,
          };

          const response = await fetch(`/api/users/miscellaneous/register`, {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify(user),
          });

          if (!response.ok) {
            const message = await response.json();
            alert(`Error: ${message.error}`);
            return;
          }
          localStorage.setItem("email", signUpEmailInput.value);

          window.location.href = "/account/otp";
        });

        sign_up_btn.addEventListener("click", () => {
          container.classList.add("sign-up-mode");
        });
        // Sign in form
        signInForm.addEventListener("submit", async (e: Event) => {
          e.preventDefault();
          const signInUsernameInput = document.querySelector(
            "#sign-in-username"
          ) as HTMLInputElement;
          const username = signInUsernameInput.value;
          const signInPasswordInput = document.querySelector(
            "#sign-in-password"
          ) as HTMLInputElement;
          const password = signInPasswordInput.value;
          if (username === "" || password === "")
            return alert("Enter your credentials");
          const requestBody = {
            username: username,
            password: password,
          };
          const response = await fetch(
            `/api/users/miscellaneous/authenticate`,
            {
              method: "POST",
              headers: {
                "Content-Type": "application/json",
              },
              body: JSON.stringify(requestBody),
            }
          );

          if (!response.ok) {
            const message = await response.json();
            alert(`Error: ${message.error}`);
            return;
          }
          const data = await response.json();
          let { isLoggedIn, user_uuid } = data;
          localStorage.setItem("isLoggedIn", `${isLoggedIn}`);
          const wishListResponse = await fetch(
            `/api/wishlist/loadUserWishlist/${user_uuid}`,
            {
              method: "GET",
            }
          );

          const wishListProducts = await wishListResponse.json();
          const productUuids = wishListProducts.map(
            (wishListProduct) => wishListProduct.product_uuid
          );
          localStorage.setItem("wishlist", JSON.stringify(productUuids));
          const cartResponse = await fetch(
            `/api/shopping_cart/loadUserCart/${user_uuid}`,
            {
              method: "GET",
            }
          );

          const cartProducts = await cartResponse.json();
          const productCartUuids = cartProducts.map(
            (wishListProduct) => wishListProduct.product_uuid
          );
          localStorage.setItem(
            "shopping_cart",
            JSON.stringify(productCartUuids)
          );
          location.href = location.origin;
        });

        sign_in_btn.addEventListener("click", showSignUp);

        function showSignUp() {
          container.classList.remove("sign-up-mode");
        }

        viewPassButtons.forEach((viewPassButton) => {
          viewPassButton.addEventListener("click", () => {
            togglePasswordVisibility(viewPassButton);
          });
        });

        function togglePasswordVisibility(button: HTMLButtonElement) {
          passwordInputs.forEach((passwordInput) => {
            if (passwordInput.type === "password") {
              passwordInput.type = "text";
              (button.querySelector(".eye") as HTMLElement).style.color =
                "firebrick";
              button.title = "Hide Password";
            } else {
              passwordInput.type = "password";
              (button.querySelector(".eye") as HTMLElement).style.color =
                "black";
            }
          });
        }

        // Random password generator
        const generatePassButton = document.querySelector(
          "#generate-btn"
        ) as HTMLElement;
        const generatePassInput = document.querySelector(
          "#generate-input"
        ) as HTMLInputElement;
        const rangeInput = document.querySelector(
          ".range-box input"
        ) as HTMLInputElement;
        const sliderNumber = document.querySelector(
          ".slider-number"
        ) as HTMLElement;

        generatePassButton.addEventListener("click", () => {
          const password = generatePassword();
          generatePassInput.value = password;
        });

        function generatePassword() {
          const charset =
            "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!@#$%^&*()";
          let password = "";
          const passwordLength = parseInt(rangeInput.value, 10); // Parse input value to a number
          for (let i = 0; i < passwordLength; i++) {
            const randomIndex = Math.floor(Math.random() * charset.length);
            password += charset[randomIndex];
          }
          return password;
        }

        rangeInput.addEventListener("input", () => {
          sliderNumber.textContent = rangeInput.value;
          generatePassword();
        });

        // Copy the random password to the clipboard
        const copyBtn = document.getElementById("copy-btn") as HTMLElement;

        copyBtn.addEventListener("click", async () => {
          try {
            await navigator.clipboard.writeText(generatePassInput.value);
          } catch (err) {
            alert("Failed to copy password!");
          }
          const notificationInfo = document.querySelector(
            ".toast-notification-info"
          ) as HTMLDivElement;
          notificationInfo.textContent = "Sucessfully copied the password!";
        });
      });
    </script>

    <style>
      /* general form styling */
      [astro-icon] {
        width: 35px;
      }
      [astro-icon="mdi:content-copy"] {
        width: 20px;
      }
      * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
      }

      :root {
        --primary-clr-100: hsl(0, 0%, 100%);
        --primary-clr-200: hsl(0, 0%, 85%);
        --primary-clr-900: hsl(0, 0%, 0%);
        --secondary-clr-400: hsl(0, 60%, 40%);
        --btn-clr: hsl(228, 81%, 59%);
      }

      .forgotPasswordModal::backdrop {
        background-color: rgba(0, 0, 0, 0.5);
      }
      .forgotPasswordModal {
        width: max(28rem, 30%);
        margin: auto;
        padding: 1.2rem;
        background-color: var(--primary-clr-100);
        border-radius: 5px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
        text-align: center;
      }

      #forgotPasswordForm label {
        margin-bottom: 10px;
      }

      #forgotPasswordForm input {
        width: 100%;
        padding: 0.5rem;
        margin-bottom: 1rem;
        border: 1px solid #ccc;
        border-radius: 3px;
      }

      #forgotPasswordForm button {
        background-color: var(--btn-clr);
        color: var(--primary-clr-100);
        padding: 0.7rem 1.5rem;
        border: 1px solid var(--btn-clr);
        width: 50%;
        border-radius: 3px;
        cursor: pointer;
        transition: 0.25s;
      }

      #forgotPasswordForm button:hover {
        background-color: var(--primary-clr-100);
        color: var(--primary-clr-900);
      }

      /* Close button styles */
      #closeForgotPasswordModal {
        width: 100%;
        transition: 0.25s;
        background-color: var(--secondary-clr-400);
        color: var(--primary-clr-100);
        padding: 0.5rem;
        border: 1px solid var(--secondary-clr-400);
        border-radius: 3px;
        cursor: pointer;
        margin-top: 1rem;
      }

      #closeForgotPasswordModal:hover {
        background-color: var(--primary-clr-100);
        color: var(--primary-clr-900);
      }

      .strike {
        text-decoration: line-through var(--secondary-clr-400);
      }
      .forgot-btn {
        background: transparent;
        border: transparent;
        cursor: pointer;
        text-decoration: underline;
        text-underline-offset: 4px;
        font-style: italic;
        margin-right: 33%;
        color: black;
        transition: 0.3s;
        &:hover {
          color: firebrick;
        }
      }
      body,
      input {
        overflow-x: hidden;
        font-family: "Poppins", sans-serif;
      }

      .container {
        position: relative;
        width: 100%;
        background-color: var(--primary-clr-100);
        min-height: 100vh;
        overflow: hidden;
      }

      .signin-signup {
        position: absolute;
        top: 50%;
        transform: translate(-50%, -50%);
        left: 75%;
        width: 50%;
        transition: 1s 0.7s ease-in-out;
        display: grid;
        grid-template-columns: 1fr;
        z-index: 5;
      }

      form {
        display: flex;
        align-items: center;
        justify-content: center;
        flex-direction: column;
        padding: 0rem 5rem;
        transition: 0.2s 0.7s;
        overflow: hidden;
        grid-column: 1 / 2;
        grid-row: 1 / 2;
      }

      form.sign-up-form {
        opacity: 0;
        z-index: 1;
      }

      form.sign-in-form {
        z-index: 2;
      }

      .title {
        font-size: 2.2rem;
        font-weight: 300;
      }

      .input-field {
        width: min(100%, 380px);
        background-color: var(--primary-clr-200);
        margin: 10px 0;
        height: 55px;
        border-radius: 100vw;
        display: grid;
        align-items: center;
        grid-template-columns: 15% 85%;
        padding: 0 0.4rem;
        position: relative;
      }

      .input-field:last-of-type {
        width: min(80%, 380px);
      }

      .input-field i {
        text-align: center;
        line-height: 55px;
        color: var(--primary-clr-900);
        transition: 0.5s;
        font-size: 1.1rem;
      }

      .input-field input {
        background: transparent;
        outline: transparent;
        border: transparent;
        line-height: 1;
        font-weight: 600;
        font-size: 1.1rem;
      }

      .input-field input::placeholder {
        font-weight: 500;
      }

      .view-pass,
      #copy-btn {
        position: absolute;
        right: 0.7rem;
        cursor: pointer;
        border: transparent;
        background-color: transparent;
      }

      .copy-pass-text {
        position: absolute;
        visibility: hidden;
        opacity: 0;
        inset: 0.5rem auto auto max(18%, 4.3rem);
        background-color: var(--btn-clr);
        color: var(--primary-clr-100);
        padding: 0.5rem 1.5rem;
        transition: 0.5s;
      }

      .password-generator {
        display: flex;
        gap: 0.5rem;
        align-items: center;
        justify-content: center;
      }

      #generate-btn {
        width: 8rem;
        color: var(--primary-clr-900);
        border: 2px solid var(--primary-clr-900);
      }

      #generate-btn:where(:hover, :focus-visible) {
        background: hsl(0 0% 0% / 0.7);
        color: var(--primary-clr-100);
      }

      .recommendations {
        max-width: 40ch;
        text-align: center;
        font-size: clamp(0.9rem, 0.8vw, 1.1rem);
        opacity: 0.7;
      }

      .range-box input {
        cursor: pointer;
        accent-color: var(--secondary-clr-400);
      }

      .social-text {
        padding: 0.7rem 0;
        font-size: 1rem;
      }

      .social-media {
        display: flex;
        justify-content: center;
      }
      .btn {
        width: 10rem;
        background: linear-gradient(
          to left,
          var(--btn-clr) 20%,
          var(--secondary-clr-400) 100%
        );
        transition: background-color 2s ease;
        border: none;
        outline: none;
        min-height: 3rem;
        border-radius: 100vw;
        color: var(--primary-clr-100);
        text-transform: uppercase;
        font-weight: 600;
        margin: 10px 0;
        cursor: pointer;
        animation: animate-gradient 3s ease-out infinite;
        background-size: 200% 200%;
      }

      @keyframes animate-gradient {
        0% {
          background-position: 0% 50%;
        }

        50% {
          background-position: 100% 50%;
        }

        100% {
          background-position: 0% 50%;
        }
      }

      .btn:where(:hover, :focus-visible) {
        border: 3px solid var(--primary-clr-900);
      }

      .panels-container {
        position: absolute;
        height: 100%;
        width: 100%;
        top: 0;
        left: 0;
        display: grid;
        grid-template-columns: repeat(2, 1fr);
      }

      .container:before {
        content: "";
        position: absolute;
        width: 2000px;
        aspect-ratio: 1;
        top: -10%;
        right: 48%;
        transform: translateY(-50%);
        background-color: var(--secondary-clr-400);
        transition: 1.8s ease-in-out;
        border-radius: 50%;
        z-index: 6;
      }

      .image {
        width: 100%;
        transition: transform 1.1s ease-in-out;
        transition-delay: 0.4s;
      }

      .panel {
        display: flex;
        flex-direction: column;
        align-items: flex-end;
        justify-content: space-around;
        text-align: center;
        z-index: 6;
      }

      .left-panel {
        pointer-events: all;
        padding: 3rem 17% 2rem 12%;
      }

      .right-panel {
        pointer-events: none;
        padding: 3rem 12% 2rem 17%;
      }

      .panel .content {
        color: var(--primary-clr-100);
        transition: transform 0.9s ease-in-out;
        transition-delay: 0.6s;
      }

      .panel h3 {
        font-weight: 600;
        line-height: 1;
        font-size: 1.8rem;
      }

      .panel p {
        padding: 0.7rem 0;
      }

      .transparent {
        margin: 0;
        background: transparent;
        border: 2px solid var(--primary-clr-100);
        width: 130px;
        height: 41px;
        font-weight: 600;
        font-size: 0.8rem;
        transition: 0.5s;
      }

      .transparent:where(:hover, :focus-visible) {
        background-color: var(--primary-clr-100);
        color: var(--primary-clr-900);
        border: 2px solid var(--primary-clr-900);
      }

      .right-panel .image,
      .right-panel .content {
        transform: translateX(800px);
      }

      /* animation part */
      .container.sign-up-mode:before {
        transform: translate(100%, -50%);
        right: 52%;
      }

      .container.sign-up-mode .left-panel .image,
      .container.sign-up-mode .left-panel .content {
        transform: translateX(-800px);
      }

      .container.sign-up-mode .signin-signup {
        left: 25%;
      }

      .container.sign-up-mode form.sign-up-form {
        opacity: 1;
        z-index: 2;
      }

      .container.sign-up-mode form.sign-in-form {
        opacity: 0;
        z-index: 1;
      }

      .container.sign-up-mode .right-panel .image,
      .container.sign-up-mode .right-panel .content {
        transform: translateX(0%);
      }

      .container.sign-up-mode .left-panel {
        pointer-events: none;
      }

      .container.sign-up-mode .right-panel {
        pointer-events: all;
      }

      @media (max-width: 870px) {
        .container {
          min-height: 800px;
          height: 100vh;
        }

        .signin-signup {
          width: 100%;
          top: 95%;
          transform: translate(-50%, -100%);
          transition: 1s 0.8s ease-in-out;
        }

        .signin-signup,
        .container.sign-up-mode .signin-signup {
          left: 50%;
        }

        .panels-container {
          grid-template-columns: 1fr;
          grid-template-rows: 1fr 2fr 1fr;
        }

        .panel {
          flex-direction: row;
          justify-content: space-around;
          align-items: center;
          padding: 2.5rem 8%;
          grid-column: 1 / 2;
        }

        .right-panel {
          grid-row: 3 / 4;
        }

        .left-panel {
          grid-row: 1 / 2;
        }

        .image {
          width: 200px;
          transition: transform 0.9s ease-in-out;
          transition-delay: 0.6s;
        }

        .panel .content {
          padding-right: 15%;
          transition: transform 0.9s ease-in-out;
          transition-delay: 0.8s;
        }

        .panel h3 {
          font-size: 1.5rem;
        }

        .panel p {
          font-size: 0.8rem;
          padding: 0.5rem 0;
        }

        .btn.transparent {
          font-size: 0.7rem;
        }

        .container:before {
          width: 1500px;
          height: 1500px;
          transform: translateX(-50%);
          left: 30%;
          bottom: 68%;
          right: initial;
          top: initial;
          transition: 2s ease-in-out;
        }

        .container.sign-up-mode:before {
          transform: translate(-50%, 100%);
          bottom: 23%;
          right: initial;
        }

        .container.sign-up-mode .left-panel .image,
        .container.sign-up-mode .left-panel .content {
          transform: translateY(-300px);
        }

        .container.sign-up-mode .right-panel .image,
        .container.sign-up-mode .right-panel .content {
          transform: translateY(0px);
        }

        .right-panel .image,
        .right-panel .content {
          transform: translateY(300px);
        }

        .container.sign-up-mode .signin-signup {
          top: 5%;
          transform: translate(-50%, 0);
        }
      }

      @media (max-width: 570px) {
        form {
          padding: 0 1.5rem;
        }

        .image {
          display: none;
        }

        .panel .content {
          padding: 0 1rem;
        }

        .container {
          padding: 1.5rem;
        }

        .container:before {
          bottom: 72%;
          left: 50%;
        }

        .container.sign-up-mode:before {
          bottom: 22%;
          left: 50%;
        }
      }
    </style>
  </body>
</html>
