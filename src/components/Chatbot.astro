---
import Icon from "node_modules/astro-icon/lib/Icon.astro";
import { verifyToken } from '@api/users/verifyToken';

const userToken = await verifyToken(Astro.request);
 const {userUUID } = userToken ?? {};
---
<body>
<button type="button" class="chatbot-toggler" name="chatbot-toggler" title="Toggle chatbot">
    <Icon name='mdi:comment' style="width: 25px" />
  <Icon name='mdi:close' style="width: 25px" />
</button>
<div class="chatbot">
    <header>
      <i class="delete-button">
            <Icon name='mdi:delete'/>
        </i>
        <h2>TechnoBot</h2>
        <i class="close-button">
            <Icon name='mdi:close'/>
        </i>
    </header>
    <ul class="chatbox" data-user-uuid={userUUID}>
       <li class="chat incoming">
  <Icon name='mdi:robot' />
        <p>Hello, dear customer. I am TechnoBot-the customer support chatbot for the website Technoworld. How can I help you?</p>
       </li>

    </ul>
    <div class="chat-input">
        <textarea placeholder="Enter a message..." name="chat-textarea" required></textarea>
        <span>   <Icon name='mdi:send' style="width: 25px" /> </span>

    </div>
</div> 
<style is:inline>
  @keyframes fadeIn {
  from {
    opacity: 0;
  }
  to {
    opacity: 1;
  }
}

@keyframes fadeOut {
  from {
    opacity: 1;
  }
  to {
    opacity: 0;
  }
}
  .edit-btn{
            opacity: 0;
  animation: fadeOut 0.2s ease forwards; /* Apply fadeIn animation */

    top: -1rem;
    right: 0;
  }
  .done-btn{
  top: -1rem;
  right: 1.5rem;
  }
  .edit-btn , .done-btn{
    position: absolute;
    transition: .2s;
    margin-top: .145rem;
    background-color: var(--clr-secondary-200);
    border: transparent;
    font-size: .75rem;
    padding: .125rem .155rem;
    cursor: pointer;
  }
 .edit-btn:where(:hover, :focus-visible), .done-btn:where(:hover, :focus-visible) {
  background: var(--clr-secondary-100);
}

.outgoing:where(:hover, :focus-visible) .edit-btn {
  animation: fadeIn 0.2s ease forwards; /* Apply fadeIn animation */
}

</style>
<style>
  .chatbot-toggler{
        z-index: 99;
        position: fixed;
        display: flex;
        justify-content: center;
        align-items: center;
        cursor: pointer;
        right: .5rem;
        bottom: .5rem;
        width: 2.6rem;
        aspect-ratio: 1;
        background-color: var(--clr-accent-600);
        color: var(--clr-neutral-100);
        outline: transparent;
        border: transparent;
        border-radius: 50%;
        transition: all .3s ease;

        & [astro-icon]{
            position: absolute;
            font-size: 1.2rem;
        }
        &:where(:hover, :focus-visible){
        background-color: var(--clr-secondary-200);
        color: var(--clr-neutral-900);

        }
    }

    .chatbot{
  overscroll-behavior-y: contain;
        z-index: 100;
        overflow: hidden;
        position: fixed;
        right: 1rem;
        bottom: 4rem;
        width: 26.25rem ;
        border-radius: 1rem;
        box-shadow: 0 0 8rem rgba(0, 0, 0, .1),
        0 2rem 4rem -3rem rgba(0, 0, 0, .5);
        scale: .5;
        opacity: 0;
        pointer-events: none;
        transform-origin: bottom right;
        transition: all .3s ease;
        
         @media (orientation: landscape) {
          height: 81dvh;
}
       .close-button , .delete-button{
        background-color: var(--clr-primary-800);
        padding:.1rem .3rem;
        transition: .25s;
      }
      .close-button:where(:hover, :focus-visible), .delete-button:is(:hover, :focus-visible){
          background-color: var(--clr-secondary-200);
          color: var(--clr-neutral-900);
      }
        & header{
            position: relative;
            background-color: var(--clr-accent-600);
            padding: 1rem 0;
            text-align: center;

            & h2{
               color: var(--clr-neutral-100);
               font-size: 1.4rem; 
            }
            & i ,.delete-button{
                position: absolute;
                right: 1.25rem;
                top: 50%;
                cursor: pointer;
                color: var(--clr-neutral-100);
                translate: 0 -50%;
                display: none;
            }
            & .delete-button{
                left: 1.25rem;
                right:89%;
              
            }
        }
        .chatbox{
            height: 31rem; 
            overflow-y: auto;
            padding: 1rem 1.25rem 6.25rem;
        }
        .chat{
            display: flex;

            & p{
                color: var(--clr-neutral-100);
                font-size: .85rem;
                background-color:var(--clr-accent-600);
                border-radius: .625rem .625rem 0 .625rem;
                padding: .75rem 1rem;
                max-width: 75%;
                white-space: pre-wrap;
            }
            & p.error{
                color: var(--clr-neutral-100);
                background-color: hsl(0, 68%, 42%);
            }
        }
        .incoming p{
            color: black;
            background-color: var(--clr-secondary-100);
           border-radius: .625rem .625rem .625rem 0;
        }
        .incoming [astro-icon]{
            align-self: flex-end;
            width: 2rem;
           height: 2rem;
            background-color: var(--clr-accent-600);
            color: aliceblue;
            text-align: center;
            line-height: 2rem;
            border-radius: .25rem;
            margin: 0 .625rem .43rem 0;
        }
        .outgoing{
            margin-block: 1rem;
            justify-content: end;
            position: relative;
        }
        .chat-input{
            display: flex;
            gap: .3rem;
            position: absolute;
            bottom: 0;
            width: 95%;
            background-color: var(--clr-neutral-100);
            padding: .3rem 1.25rem;
            border: 1px solid #ccc;
             border-radius: 1rem;


            & textarea{
                width: 100%;
                border: transparent;
                outline: transparent;
                font-size: .95rem;
                resize: none;
                padding: 1rem .9rem 1rem 0
            }
            & [astro-icon]{
                align-self: flex-end;
               color: var(--clr-accent-600);
               margin-top: 1.2rem;
               cursor: pointer;
              visibility: hidden;
            }
           & textarea:valid ~ span [astro-icon]{
            visibility: visible;
           }
           
        }
    }
        .show-chatbot .chatbot-toggler{
   rotate: 90deg;
    }
    .show-chatbot .chatbot-toggler [astro-icon]:first-child,
    .chatbot-toggler [astro-icon]:last-child{
        opacity: 0;
    }
    .show-chatbot .chatbot{
         scale: 1;
        opacity: 1;
        pointer-events: auto;
        background-color: var(--clr-neutral-100);
    }
    .show-chatbot .chatbot-toggler [astro-icon]:last-child {
        opacity: 1;
    }
    @media (width < 500px){
        .chatbot{
            right: 0;
            bottom: 0;
            width: 100%;
            height: 100dvh;
            border-radius: 0;
            .chatbox{
                height: 90%;
            }
        }
    }
    .chatbot header i{
        display: block;
    }
</style>

<script>
 document.addEventListener("astro:page-load", () => {

      const sendChatBtn = document.querySelector(".chat-input span") as HTMLInputElement;
      const chatbox = document.querySelector(".chatbox") as HTMLInputElement;  if(!chatbox) return;
      const userUUID = chatbox.getAttribute("data-user-uuid")!;
      const chatInput = document.querySelector(".chat-input textarea") as HTMLInputElement;
      const deleteChatConversation = document.querySelector(".delete-button") as HTMLButtonElement;

      let userMessage: string;

      function toggleChatBot() {
        const chatToggler = document.querySelector(".chatbot-toggler") as HTMLButtonElement;
        const chatBotCloseBtn = document.querySelector(".close-button") as HTMLButtonElement;
        chatToggler.addEventListener("click", () => document.body.classList.toggle("show-chatbot"));
        chatBotCloseBtn.addEventListener("click", () => document.body.classList.remove("show-chatbot"));

      }

      toggleChatBot();
      async function saveChatMessage(message: string, type: string, user_uuid: string) {
        try {
          const message_uuid = crypto.randomUUID();
          await fetch('/api/chatbot/createMessage', {
            method: 'POST',
            headers: { 
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({message_uuid, message, type, user_uuid }),
          });
           const outgoingMessage = chatbox.lastElementChild as HTMLElement;
        const messageContent = outgoingMessage.querySelector("p") as HTMLParagraphElement;
        messageContent.dataset.messageuuid = message_uuid;

        } catch (error) {
          console.error('Error saving chat message:', error);
        }
      }

      async function fetchChatMessages(){
          const response = await fetch(`/api/chatbot/loadChatConversation/${userUUID}`,{
            method: 'GET',
          });
          const data = await response.json();
          return data
      }

      async function loadChatMessages() {
        try {
          const chatMessages = await fetchChatMessages();
          // Process loaded messages (e.g., display on the UI)
          chatMessages.forEach(chatMessage => {
            const className = chatMessage.is_user_message ? 'outgoing' : 'incoming';
            chatbox.appendChild(createChatLi(chatMessage.message_content, className,chatMessage.message_uuid));
          });

          chatbox.scrollTo(0, chatbox.scrollHeight);
        } catch (error) {
          console.error('Error loading chat messages:', error);
        }
      }

      async function generateResponse(incomingChatLi: HTMLLIElement) {
        const messageElement = incomingChatLi.querySelector('p') as HTMLParagraphElement;
        try {
          const response = await fetch('/api/chatbot/chatbotAnswer', {
            method: "POST",
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({ userPrompt: userMessage })
          });

          const data = await response.json();
          saveChatMessage(data, "incoming", userUUID);

          // Display response one letter at a time with a blinking cursor
          for (let i = 0; i <= data.length; i++) {
            setTimeout(() => {
              const cursor = i === data.length ? '' : '█';
              messageElement.innerHTML = data.substring(0, i) + cursor;
              chatbox.scrollTo(0, chatbox.scrollHeight);
            }, i * 50);
          }
        } catch (error) {
          messageElement.classList.add("error");
          messageElement.textContent = 'Oops! Something went wrong. Please try again.'
        }
      }

      function createChatLi(message: string, className: string, message_uuid?:string) {

        const chatLi = document.createElement('li');
        chatLi.classList.add("chat", className);
        let chatContent = className === 'outgoing' ? `<p class='user-text' data-messageuuid='${message_uuid}'></p> 
        <div style='display: flex; flex-direction:column; gap: .2rem'>
        <button class="edit-btn" title='Edit Message'>
          <svg viewBox="0 0 24 24" data-astro-cid-rniuooyg="" astro-icon="mdi:tooltip-edit" style='pointer-events: none'><path fill="currentColor" d="M20 2H4c-1.1 0-2 .9-2 2v12a2 2 0 0 0 2 2h4l4 4 4-4h4c1.11 0 2-.89 2-2V4a2 2 0 0 0-2-2M9.08 15H7v-2.09l6.17-6.19 2.07 2.08L9.08 15m7.76-7.8-1.01 1.01-2.07-2.03 1.01-1.02c.2-.21.54-.22.78 0l1.29 1.25c.21.21.22.55 0 .79z"></path></svg>
          </button>
        <button class="done-btn" style='display:none' title='Confirm Edited Message'>
          <svg viewBox="0 0 24 24" data-astro-cid-rniuooyg="" astro-icon="mdi:check"  style='pointer-events: none'><path fill="currentColor" d="M21 7 9 19l-5.5-5.5 1.41-1.41L9 16.17 19.59 5.59 21 7z"></path></svg>
          </button>
        </div>
` : `  <svg viewBox="0 0 24 24" data-astro-cid-rniuooyg="" astro-icon="mdi:robot"><path fill="currentColor" d="M12 2a2 2 0 0 1 2 2c0 .74-.4 1.39-1 1.73V7h1a7 7 0 0 1 7 7h1a1 1 0 0 1 1 1v3a1 1 0 0 1-1 1h-1v1a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-1H2a1 1 0 0 1-1-1v-3a1 1 0 0 1 1-1h1a7 7 0 0 1 7-7h1V5.73c-.6-.34-1-.99-1-1.73a2 2 0 0 1 2-2M7.5 13A2.5 2.5 0 0 0 5 15.5 2.5 2.5 0 0 0 7.5 18a2.5 2.5 0 0 0 2.5-2.5A2.5 2.5 0 0 0 7.5 13m9 0a2.5 2.5 0 0 0-2.5 2.5 2.5 2.5 0 0 0 2.5 2.5 2.5 2.5 0 0 0 2.5-2.5 2.5 2.5 0 0 0-2.5-2.5z"></path></svg> <p data-messageuuid='${message_uuid}'> </p>`
        chatLi.innerHTML = chatContent;
        chatLi.querySelector('p')!.textContent = message;
        
        return chatLi
      }

      function handleChat() {
        userMessage = chatInput.value.trim();
        if (!userMessage) return;

        chatInput.value = ''
        // Append the user's message to the chatbox
        chatbox.appendChild(createChatLi(userMessage, "outgoing"));
        chatbox.scrollTo(0, chatbox.scrollHeight);
        saveChatMessage(userMessage, "outgoing", userUUID);

        setTimeout(() => {
          const incomingChatLi = createChatLi('Thinking...', "incoming")
          chatbox.appendChild(incomingChatLi);
          chatbox.scrollTo(0, chatbox.scrollHeight)

          generateResponse(incomingChatLi);
        }, 600); 
      }

      sendChatBtn.addEventListener("click", handleChat);

      deleteChatConversation.addEventListener("click",async()=>{
      const chatMessages = await fetchChatMessages();
      if(chatMessages.length === 0) return alert("First create a conversation in order to delete it later!");
        const result = window.confirm('Are you sure you want to delete your chat history?')
        if(result === false) return;
        const response = await fetch(`/api/chatbot/deleteChatConversation/${userUUID}`,{
          method: "DELETE",
        })
        if(!response.ok){
          const errorMessage = await response.json();
          alert(errorMessage.error);
        }
         const sucessMessage = await response.json();
          alert(sucessMessage.message);
          location.reload();
      })
      loadChatMessages();

let isEditButtonClicked = false;

document.addEventListener("click", (e) => {
  const btnTarget = e.target as HTMLButtonElement;

  if (btnTarget.classList.contains("edit-btn")) {
    handleEdit(btnTarget);
    isEditButtonClicked = true;
  } else if (btnTarget.classList.contains("done-btn")) {
    sendEditedText(btnTarget);
    isEditButtonClicked = false;
  } else if (btnTarget.classList.contains("user-text") && isEditButtonClicked === true) {
    handleEdit(btnTarget);
  } else {
    isEditButtonClicked = false;
    const doneButtons = document.querySelectorAll(".done-btn") as NodeListOf<HTMLButtonElement>;
    doneButtons.forEach((doneBtn) => {
      doneBtn.style.display = 'none';
    });

    const outgoingMessage = btnTarget.closest(".outgoing") as HTMLDivElement;
    if (!outgoingMessage) return;

    const messageContent = outgoingMessage.querySelector("p") as HTMLParagraphElement;
    messageContent.contentEditable = "false";
}
});

function handleEdit(btnTarget: HTMLButtonElement) {
    const outgoingMessage = btnTarget.closest(".outgoing") as HTMLDivElement;
    const messageContent = outgoingMessage.querySelector("p") as HTMLParagraphElement;
    const div = outgoingMessage.querySelector("div") as HTMLDivElement;
    const doneBtn = div.querySelector(".done-btn") as HTMLButtonElement;
    doneBtn.style.display = 'block';

    // Make the message content editable
    messageContent.contentEditable = "true";
    messageContent.focus();
}

async function sendEditedText(btnTarget: HTMLButtonElement) {
    const outgoingMessage = btnTarget.closest(".outgoing") as HTMLDivElement;
    const messageContent = outgoingMessage.querySelector("p") as HTMLParagraphElement;

    if (messageContent.contentEditable !== 'true') {
        const div = outgoingMessage.querySelector("div") as HTMLDivElement;
        const doneBtn = div.querySelector(".done-btn") as HTMLButtonElement;
        doneBtn.style.display = 'none';
        return alert("First edit your message in order to submit the new message!");
    }

    userMessage = messageContent.textContent!;
    const message_uuid = messageContent.dataset.messageuuid;

    messageContent.contentEditable = "false";
    await fetch(`/api/chatbot/updateChatMessage/${message_uuid}`, {
        method: "PUT",
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({ userMessage })
    });

    const closestIncomingMessage = outgoingMessage.nextElementSibling as HTMLLIElement;
    let botMessageUUID = closestIncomingMessage.querySelector('p')!.dataset.messageuuid;
    await fetch(`/api/chatbot/deleteLatestBotMessage/${botMessageUUID}`, {
        method: 'DELETE',
    });
    closestIncomingMessage.remove();

    const incomingChatLi = createChatLi('Thinking...', "incoming");
    chatbox.appendChild(incomingChatLi);
    chatbox.scrollTo(0, chatbox.scrollHeight);
    generateResponse(incomingChatLi);
}

  
    });
</script>