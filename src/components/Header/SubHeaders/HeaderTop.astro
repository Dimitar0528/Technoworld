---
import Link from "../../utilities/Link.astro";
import { Icon } from "astro-icon";
import { verifyToken } from "@api/users/verifyToken";
const userToken = await verifyToken(Astro.request);
const { userUUID } = userToken ?? {};
interface Props {
  text: string;
}
const { text } = Astro.props;
---

<ul class="header-links max-width">
  <li>
    <a href="/" class="nav-item"><span id="text">{text}</span></a>
  </li>
  <Link
    href={userUUID ? `/account/profile/${userUUID}` : "/account/sign-in"}
    displayIcon="true"
    iconClass="account"
    body={userUUID ? "Account" : "Sign Up"}
    prefetch="false"
  />
  <div class="dropdown" data-dropdown>
    <button class="link" data-dropdown-button>
      <Icon name="mdi:palette" /> Themes <Icon
        name="mdi:arrow-down-circle-outline"
      /></button
    >
    <div class="dropdown-menu" transition:persist>
      <form class="color-picker" name="themes">
        <fieldset>
          <legend class="sr-only">Pick a color scheme</legend>
          <label for="default" class="sr-only">Default</label>
          <input type="radio" name="theme" id="default" checked />
          <label for="green" class="sr-only">Green theme</label>
          <input type="radio" name="theme" id="green" />
          <label for="blue" class="sr-only">Blue theme</label>
          <input type="radio" name="theme" id="blue" />
          <label for="purple" class="sr-only">Purple theme</label>
          <input type="radio" name="theme" id="purple" />
          <label for="pink" class="sr-only">Pink theme</label>
          <input type="radio" name="theme" id="pink" />
        </fieldset>
      </form>
    </div>
  </div>
  <div class="dropdown" data-dropdown>
    <button class="link" data-dropdown-button
      ><Icon name="mdi:globe" /> Languages <Icon
        name="mdi:arrow-down-circle-outline"
      /></button
    >
    <div class="dropdown-menu" transition:persist>
      <label for="language-selector"
        ><span class="sr-only">Language selector</span></label
      >
      <select class="language-selector" id="language-selector">
        <option lang="en" value="en">English</option>
        <option lang="bg" value="bg">Bulgarian</option>
      </select>
    </div>
  </div>

  <div class="dropdown" data-dropdown>
    <button class="link" data-dropdown-button
      ><Icon name="mdi:currency-usd" /> Currencies <Icon
        name="mdi:arrow-down-circle-outline"
      /></button
    >
    <div class="dropdown-menu" transition:persist>
      <label for="currency-selector"
        ><span class="sr-only">Currency selector</span></label
      >
      <select class="currency-selector" id="currency-selector">
        <option value="usd">USD</option>
        <option value="eur">EUR</option>
        <option value="bgn">BGN</option>
      </select>
    </div>
  </div>
</ul>
<style>
  .header-links {
    display: grid;

    grid-template-columns: 1fr repeat(4, auto);
    gap: 0.5rem;
    background-color: var(--clr-primary-700);
    border-radius: 1rem;
    font-size: var(--fs-200);
    @media (width < 520px) {
      grid-template-columns: repeat(auto-fit, minmax(140px, 1fr));
    }
    & span {
      font-size: clamp(0.65rem, 0.78vw, 1rem);
      text-transform: uppercase;
      font-weight: var(--fw-bold);
    }

    @media (width < 768px) {
      place-items: center;
      text-align: center;
    }
    .dropdown {
      position: relative;

      .dropdown-menu {
        z-index: 99;
        position: absolute;
        top: calc(100% + 0.25rem);
        background-color: var(--clr-accent-500);
        padding: 0.7rem;
        border-radius: 0.5rem;
        box-shadow: 0 2px 5px 0 rgba(0 0 0 /0.5);
        opacity: 0;
        pointer-events: none;
        translate: -15px -15px;
        transition:
          opacity 150ms ease-in-out,
          translate 150ms ease-in-out;
      }
      & .link {
        transition: 0.25s;
        margin-top: 0.1rem;
        display: flex;
        align-items: center;
        gap: 0.15rem;
        background: transparent;
        border: transparent;
        outline: transparent;
        cursor: pointer;
        color: var(--clr-neutral-100);

        &:where(:hover, :focus-visible) {
          color: var(--clr-accent-400);
        }
      }
      &.active > .link + .dropdown-menu {
        opacity: 1;
        translate: -15px 3px;
        pointer-events: auto;
      }
    }

    .color-picker > fieldset {
      border: transparent;
      display: flex;
      width: fit-content;
      gap: 1.5rem;
      padding-inline: 0.8rem;
    }

    .color-picker input[type="radio"] {
      cursor: pointer;
      appearance: none;
      width: 0.9rem;
      aspect-ratio: 1;
      outline: 3px solid var(--radio-color, currentColor);
      outline-offset: 3px;
      border-radius: 100vw;
    }

    .color-picker input[type="radio"]:checked {
      background-color: var(--radio-color);
    }

    #default {
      --radio-color: hsl(350, 100%, 52%);
    }

    #blue {
      --radio-color: hsl(209, 100%, 50%);
    }

    #green {
      --radio-color: hsl(119, 100%, 50%);
    }

    #purple {
      --radio-color: hsl(279, 100%, 50%);
    }
    #pink {
      --radio-color: hsl(330, 80%, 51%);
    }
    .language-selector,
    .currency-selector {
      padding: 0.3rem 0.8rem;
      background-color: var(--clr-primary-700);
      color: var(--clr-neutral-100);
      border-radius: 0.5rem;
      cursor: pointer;
    }
  }

  @keyframes flip {
    0%,
    80% {
      transform: rotateY(360deg);
    }
  }
  @media (width < 768px) {
    [astro-icon="mdi:arrow-down-circle-outline"] {
      display: none;
    }
  }
</style>

<script>
  //color theme picker
  function storeTheme(theme) {
    localStorage.setItem("theme", theme);
    document.getElementById("theme-color-meta")!.setAttribute("content", theme);
  }
  function setTheme() {
    const colorThemes = document.querySelectorAll('[name="theme"]');

    const activeTheme = localStorage.getItem("theme");
    colorThemes.forEach((themeOption: HTMLInputElement) => {
      if (themeOption.id === activeTheme) {
        themeOption.checked = true;
        storeTheme(themeOption.id);
      }
    });
    colorThemes.forEach((themeOption) => {
      themeOption.addEventListener("input", () => {
        storeTheme(themeOption.id);
      });
    });
  }
  setTheme();
  document.addEventListener("astro:after-swap", setTheme);
</script>
<script>
  import {
    updateWishlistDropdown,
    updateCartDropdown,
  } from "src/scripts/dropdowns";

  document.addEventListener("click", (e: MouseEvent) => {
    const isDropDownButton = (e.target as HTMLElement).matches(
      "[data-dropdown-button]"
    );
    if (
      !isDropDownButton &&
      (e.target as HTMLElement).closest("[data-dropdown]") != null
    )
      return;
    let currentDropDown: HTMLElement;
    if (isDropDownButton) {
      currentDropDown = (e.target as HTMLElement).closest(
        "[data-dropdown]"
      ) as HTMLElement;
      currentDropDown.classList.toggle("active");
    }

    document
      .querySelectorAll("[data-dropdown].active")
      .forEach((dropdown: HTMLDivElement) => {
        if (dropdown === currentDropDown) return;
        dropdown.classList.remove("active");
      });
  });

  document.addEventListener("astro:page-load", () => {
    const apiKey = "e7bd81bb-7110-9cb5-3be7-c6917d4433a5:fx";
    const languageSelector = document.querySelector(
      ".language-selector"
    ) as HTMLSelectElement;
    const currencySelector = document.querySelector(
      ".currency-selector"
    ) as HTMLSelectElement;

    const contentElements = document.querySelectorAll(
      "[data-text]"
    ) as NodeListOf<HTMLElement>;
    const priceTags = document.querySelectorAll(".price-tag");

    const prices = document.querySelectorAll(".price");
    // Store the original English text for each content element
    const originalTexts = Array.from(contentElements).map((element) =>
      element.textContent!.trim()
    );
    const originalPrices = Array.from(prices).map((element) =>
      parseFloat(element.textContent!.trim())
    );

    const selectedLanguage = localStorage.getItem("selectedLanguage") || "en";
    const selectedCurrency = localStorage.getItem("selectedCurrency") || "usd";

    // Set the initial language selection in the dropdown menu
    languageSelector.value = selectedLanguage;
    currencySelector.value = selectedCurrency;
    languageSelector.addEventListener("change", translateAllContent);
    currencySelector.addEventListener("change", convertCurrency);
    // Translate text from one language to another using the DeepL API
    async function translateText(
      text: string,
      sourceLanguage: string,
      targetLanguage: string
    ) {
      try {
        const response = await fetch(
          `https://api-free.deepl.com/v2/translate?auth_key=${apiKey}&text=${encodeURIComponent(text)}&source_lang=${sourceLanguage}&target_lang=${targetLanguage}`
        );
        const data = await response.json();
        return data.translations[0].text;
      } catch (error) {
        console.error("Translation error:", error);
        return text;
      }
    }

    // Translate the text content of a single element
    async function translateElementContent(
      contentElement: HTMLElement,
      targetLanguage: string
    ) {
      const sourceLanguage = "EN"; // Assuming the source language is English

      // Filter and iterate through text nodes within the content element
      const textNodes = Array.from(contentElement.childNodes).filter(
        (node) => (node as Node).nodeType === Node.TEXT_NODE
      );

      // Iterate through each text node within the content element and translate its content
      for (const textNode of textNodes as Text[]) {
        if (textNode.textContent === null) return;
        // Translate the text content of the current text node
        const translatedText = await translateText(
          textNode.textContent,
          sourceLanguage,
          targetLanguage
        );
        textNode.textContent = translatedText;
      }
    }

    // Translate content for all elements when the language is changed
    async function translateAllContent(event?: Event) {
      const targetLanguage = languageSelector.value;
      localStorage.setItem("selectedLanguage", targetLanguage);
      if (event && event.type === "change") {
        for (let i = 0; i < contentElements.length; i++) {
          const contentElement = contentElements[i];
          const originalText = originalTexts[i];
          contentElement.textContent = originalText; // Restore original text before translating
          await translateElementContent(contentElement, targetLanguage);
        }
      }
    }
    function convertCurrency() {
      for (let i = 0; i < priceTags.length; i++) {
        const targetedCurrency = currencySelector.value;
        localStorage.setItem("selectedCurrency", targetedCurrency);
        const originalPrice = originalPrices[i];
        const price = prices[i] as HTMLElement;
        if (targetedCurrency === "bgn") {
          const adjustedPrice = originalPrice * 1.80507;
          price.textContent = `${adjustedPrice.toFixed(0)} лв`;
        } else if (targetedCurrency === "eur") {
          const adjustedPrice = originalPrice * 0.9222300935;
          price.textContent = `${adjustedPrice.toFixed(0)} €`;
        } else {
          price.textContent = `${originalPrice.toFixed(0)} $`;
        }
      }
      updateWishlistDropdown();
      updateCartDropdown();
    }
    translateAllContent();
    convertCurrency();
  });
</script>
