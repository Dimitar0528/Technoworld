---
import { Rating } from 'astro-headless-ui';
import { Icon } from 'astro-icon';
const { uuid, image_src, name, price, quantity, category, advertisable, average_rating } = Astro.props;

---

<div class="product" data-product-id={uuid} >
    <div class="overlay">
      {advertisable && <span class="overlay-item | new">New ðŸ†•</span>}
      {quantity !== 0 ? <span class="overlay-item">In Stock </span>: <span class="overlay-item  | few-left">Out Of Stock</span>}
      {quantity > 0 && quantity < 15 && <span class="overlay-item | few-left">A few left</span>}
    </div>
    <a href=`/products/getProduct/${category}/${uuid}` class="product-link"> 
    <img
      src={image_src}
      alt={name} width="400" height="230"
      class="product-image"
      transition:name=`product${uuid}`
    />
    </a>
      <button type="button" class="heart" name="wishlist-btn"  aria-label="wishlist-btn" data-notification-btn  title="Add product to wishlist" data-product-id={uuid} >
        <Icon name='mdi:heart' style="width: 35px" />
 </button>
    <p class="product-category">{category}</p>
    <h3 class="product-name" data-text>
      {name}
    </h3>
    <div class="product-rating" title=`${average_rating} out of 5`>
    <Rating total="5" active={average_rating} >
      <Icon slot="active" name="codicon:star-full"></Icon>
      <Icon slot="half" name="codicon:star-half"></Icon>
      <Icon slot="disabled" name="codicon:star-empty"></Icon>
    </Rating>
    <p>{average_rating}</p>
    </div>
    <p class="price-tag">Price: <span class="price">{price}</span></p>
    {
  quantity > 0 ?   <button type="button" class="add-to-cart" data-notification-btn>
   <Icon name='mdi:cart'/> Buy Now
  </button> : <p class="out-of-order"> Out of stock</p>
}
    <div class="cta-admin-buttons">
    <a href=`/products/editProduct/${uuid}`>Edit</a>
   <button class="delete-product | main-delete-product-btn" data-product-id={uuid}> Delete</button>
  </div>
   
</div>
<style>
  .product {
    position: relative;
    display: grid;
    place-items: center;
    margin-inline: auto;
    isolation: isolate;
    background-color: var(--clr-neutral-100);
    max-width: 90%;
    margin-bottom: 2rem;
    box-shadow: 0 4px 8px 0 hsla(0 0% 0%/ 0.2);
    transition: .4s;

      .product-link {
    text-decoration: none;
    color: var(--clr-neutral-900);
    outline: 0;
    text-align: center;

    &:where(:hover, :focus-visible) .product-image {
    transform: perspective(800px) rotateX(10deg) translateZ(15px);
  }
  }
  .overlay{
    display: flex;
    flex-direction:row-reverse;
    flex-wrap: wrap;
    justify-content: center;
    align-items: center;
    gap: .5rem;
    position: absolute;
    z-index: 9;
    right: 1.5rem;
    top: .8rem;
    font-size: .85em;
    margin-bottom: 1.5rem;
    .overlay-item{
      border: 2px solid var(--clr-secondary-200);
    background-color: var(--clr-secondary-200);
    color: var(--clr-neutral-900);
     border-radius: 0 .7rem 0 0 ;
    padding: 0 .3rem;
  }
  .overlay-item.new{
    background-color: var(--clr-primary-700);
    color: var(--clr-neutral-100);
  border: 2px solid var(--clr-primary-700);
  }
  .overlay-item.few-left{
     background-color: firebrick;
    color: var(--clr-neutral-100);
  border: 2px solid firebrick;
  }
  }
    .product-image {
    margin-top: .3rem;
    margin-inline: auto;
    user-select: none;
    max-width: 90%;
    border: 1px solid var(--clr-accent-500);
    border-radius: 1.5rem;
    transition: 0.4s;
  }
   [astro-icon]{
    width: 22px;
    aspect-ratio: 1;
    color: var(--clr-accent-400);
    
  }
  .product-rating{
    display: flex;
    background-color: var(--clr-secondary-100);
    padding: .2rem;
    margin-bottom: .5rem;
    & p{
      margin-left: .5rem;
      font-size: .9rem;
    }
  }
    [astro-icon='mdi:cart']{
      width: 20px;
      transition: .3s;
    color: var(--clr-neutral-100);
  }

  &:where(:hover, :focus-within) {
    translate: 0 -3px;
    outline: var(--outline);
    box-shadow: 0 5px 8px 8px hsla(0 0% 0% / 0.3);
  }
  }
</style>

<style is:inline>
    .heart{
    border-radius: 100vmax;
    border: transparent; 
    background-color: transparent;
    position: absolute;
    top:12rem;
    right: 1.5rem;
    [astro-icon] {
      transition: .25s;
    color: var(--clr-neutral-100);
    background-color: var(--clr-secondary-100);
    padding: .3rem;
    border-radius: 100vmin;
    cursor: pointer;
      stroke: black;
  stroke-width: 2px;
    & path{
      fill: white;
    }
  }
  & [astro-icon]:where(:hover,:focus-visible){
  background-color: var(--clr-secondary-200);
  }
   &:active [astro-icon] {
      animation: pulseAnimation 0.3s linear;
    }
  }
 @keyframes pulseAnimation {
   0% { transform: translate(1px, 1px) rotate(0deg); }
  10% { transform: translate(-1px, -2px) rotate(-1deg); }
  20% { transform: translate(-3px, 0px) rotate(1deg); }
  30% { transform: translate(3px, 2px) rotate(0deg); }
  40% { transform: translate(1px, -1px) rotate(1deg); }
  50% { transform: translate(-1px, 2px) rotate(-1deg); }
  60% { transform: translate(-3px, 1px) rotate(0deg); }
  70% { transform: translate(3px, 1px) rotate(-1deg); }
  80% { transform: translate(-1px, -1px) rotate(1deg); }
  90% { transform: translate(1px, 2px) rotate(0deg); }
  100% { transform: translate(1px, -2px) rotate(-1deg); }
  }
  .add-to-cart {
      display: flex;
      justify-content: center;
      align-items: center;
      gap: .2rem;
    font-size: .95rem;
    padding: 0.5rem;
    margin-block: 0.75rem;
    width: max(65%, 10rem);
    text-transform: uppercase;
    cursor: pointer;
    transition: 0.7s;
    background-color: var(--clr-accent-500);
    color: var(--clr-neutral-100);
    border: transparent;
    outline: 2px solid var(--clr-accent-400);
    border-radius: 100vw;

    &:where(:hover, :focus-visible) {
    background-color: var(--clr-neutral-100);
    color: var(--clr-neutral-900);
   width: max(70%, 12rem);
    padding: 0.5rem 1rem;
    box-shadow: 4px 4px var(--clr-accent-400);
  }
   &:is(:hover, :focus-visible) [astro-icon='mdi:cart']{
  color: black ;
   }
  }
  .out-of-order{
    font-size: 1.25rem;
  }
  .skeleton-loading {
    background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%);
    background-size: 200% 100%;
    animation: loading 1.5s infinite;
  }

  @keyframes loading {
    0% {
      background-position: 200% 0;
    }
    100% {
      background-position: -200% 0;
    }
  }
</style>  
<script>
    import { addProductToCart_Wishlist } from "src/scripts/addProductToCart_Wishlist";
  addProductToCart_Wishlist('.product');

const isLoggedIn = localStorage.getItem("isLoggedIn");

function handleMessage(event:Event) {
  const isAddToCartButton = (event.target as HTMLElement).classList.contains("add-to-cart");
  if (isLoggedIn === 'false') {
    if (isAddToCartButton) return alert("Log in to add the product to your cart!");
    else return alert("Log in to add the product to your wishlist!");
  }
}

document.addEventListener('astro:page-load', () => {
  const notificationButtons = document.querySelectorAll('[data-notification-btn]');
  notificationButtons.forEach(button => {
    button.removeEventListener("click", handleMessage);
    button.addEventListener("click", handleMessage);
  });


  async function handleDeleteProduct(event: Event) {
    const productUUID = (event.target as HTMLElement).getAttribute('data-product-id');
    const result = window.confirm('Are you sure you want to delete this product?');
    if (result !== true) return;
    const response = await fetch(`/api/products/deleteProduct/${productUUID}`, {
      method: 'DELETE',
    });
    if (response.ok) {
      const productCard = (event.target as HTMLElement).closest('.product');
      productCard && productCard.remove(); // Remove the card from the UI
      location.reload();
    } else {
      const responseData = await response.json();
      alert(`Error: ${responseData.error}`);
    }
  } 

  const deleteProductButtons = document.querySelectorAll('.main-delete-product-btn');
  deleteProductButtons.forEach(button => {
    button.removeEventListener('click', handleDeleteProduct);
    button.addEventListener('click', handleDeleteProduct);
  });
});

</script>