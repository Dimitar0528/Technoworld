---
import { Icon } from "astro-icon";
import User from "db/models/User";
import Product from "db/models/Product";

import UserCard from "./UserCard.astro";
import HeaderTop from "@components/Header/SubHeaders/HeaderTop.astro";
import { GetAllUsers } from "@api/users/getAllUsers";
import { GetAllProducts } from '@api/products/getAllProducts';
import { GetUser } from "@api/users/getUser/[user_uuid]";
import { GET as getOrdersForUser } from "@api/orders/loadUserOrders/[user_uuid]";
import { getAllOrders } from '@api/orders/loadAllOrders';
import { getAllAuctions } from "@api/auctions/loadAllAuctions";
import {getProducts as GetProduct} from '@api/products/getProduct/[product_uuid]'
import {getUser} from "@api/users/getUser/[user_uuid]";
import type Order from 'db/models/Order'
import type Auction from "db/models/Auction";
import ScrollToTopButton from "@components/utilities/ScrollToTopButton.astro";

interface Props {
  is_admin: true | false;
}

const { is_admin } = Astro.props;

const [responseUsers, responseProducts, responseUser, responseOrders, responseAllOrders,responseAllAuctions] = await Promise.all([
  GetAllUsers(),
  GetAllProducts(),
  GetUser(Astro),
  getOrdersForUser(Astro),
  getAllOrders(Astro),
  getAllAuctions()
]);

const users: User[] = await responseUsers.json();
const products:Product[] = await responseProducts.json();
const user: User = await responseUser.json();
const orders: Order[] = await responseOrders.json();
const allOrders: Order[] = await responseAllOrders.json();
const auctions: Auction[] = await responseAllAuctions.json();
--- 
<HeaderTop text="Back To Main Page"/>
<ScrollToTopButton />
<section class="tabs-wrapper">
				<div class="tabs-container">
					<div class="tabs-block">
						<div id="tabs-section" class="tabs">
							<ul class="tab-head">
								{is_admin === true ? 
                <li>
									<a href="#tab-1" class="tab-link " aria-label="Clients">
                   <Icon name="mdi:account-group" class="tab-icon"/>
                   <span class="tab-label">Clients</span></a>
								</li>  
                : null}
                <li>
									<a href="#tab-2" class="tab-link" aria-label="Orders"> <Icon name="mdi:order-alphabetical-ascending" class="tab-icon"/> <span class="tab-label">Orders</span></a>
								</li>
                {is_admin === true ? 
                	<li>
									<a href="#tab-3" class="tab-link " aria-label="Products"><Icon name="mdi:laptop" class="tab-icon"/> <span class="tab-label">Products</span></a>
								</li>
                : null}
                 {is_admin === true ? 
                	<li>
									<a href="#tab-4" class="tab-link " aria-label="Products"><Icon name="mdi:account-arrow-up-outline" class="tab-icon"/> <span class="tab-label">Auctions</span></a>
								</li>
                : null}
                                <li>
									<a href="#tab-5" class="tab-link "aria-label="Account"><Icon name="mdi:account" class="tab-icon"/> <span class="tab-label">Account</span></a>
								</li>
							</ul>
     {is_admin === true ? 
							<section id="tab-1" class="tab-body entry-content">
                  <input
    type="search"
    placeholder="Search by name or ID..."
    class="searchInput1 | searchInput"
    oninput="search(1)"
  />
								<table class="rwd-table">
    <tbody>
      <tr>
        <th>ID</th>
        <th>Username</th>
        <th>Email</th>
        <th>Actions</th>
      </tr>
       {
     users.map((user: User) =>
     <tr class="data1">
     <td data-th="ID">{user.uuid}</td>
     <td data-th="Name">{user.username}</td>
     <td data-th="Email">{user.email_adress}</td>
      <td data-th="Actions">
         <div class="cta-admin-buttons">
   <button class="delete-user-btn" data-product-id={user.uuid}> Delete Account</button>
  </div>
        </td>
      </tr>
     )
 }
    </tbody>
  </table>
		</section>
:
 null}
{
  is_admin === true ?
  <section id="tab-2" class="tab-body entry-content">
      <input
    type="search"
    placeholder="Search by name or ID..."
    class="searchInput2 | searchInput"
    oninput="search(2)"
  />
											<table class="rwd-table">
    <tbody>
      <tr>
        <th>ID</th>
        <th>Client</th> 
        <th>Items</th>
        <th>Date</th>
        <th>Total Cost</th>
        <th>Status</th>
        <th>Payment Status</th>

      </tr>
       {
  allOrders.length === 0
    ? 
        <h2 style="font-size: 1.5rem; text-align: center; margin-bottom: 1rem;">No orders yet</h2>
     
    : allOrders.map((order: Order) => {
        const createdAtLocal = new Date(order.createdAt).toLocaleString('en-GB');
         function getOrderStatusColor(orderStatus:string) {
  switch (orderStatus) {
    case 'shipped':
      return 'lightpink';
    case 'delivered':
      return 'lightblue';
    case 'completed':
      return 'lightgreen';
    default:
      return 'orange';
  }
}

        return (
          <tr class='data2'>
            <td data-th="ID">{order.order_uuid}</td>
            <td data-th="Name">{order.User.username}</td>
            <td data-th="Items">{order.order_items}</td>
            <td data-th="Date">{createdAtLocal}</td>
            <td data-th="Total Cost">
            <span class="price-tag"><span class="price">{order.total_price_amount}</span></span>
            </td>
            <td data-th="Status"><span style={{ backgroundColor: getOrderStatusColor(order.order_status) }}>{order.order_status}</span>
              {
                order.order_status !== 'completed' &&
                <select name="status" id={`status${order.order_uuid}`}>
                  <option value="">-- Choose one --</option>
                  <option value="shipped">Shipped</option>
                  <option value="delivered">Delivered</option>
                  <option value="completed">Completed</option>
                  </select>
                  <button class="update-status-btn" id={`update${order.order_uuid}`} onclick="handleUpdateStatus(this)"> Update</button>
              }
              </td>
            <td data-th="Payment Status">{order.payment_status} </td>

          </tr>
        );
      })
}

    </tbody>
  </table>
		</section> 
  : <section id="tab-2" class="tab-body entry-content">
        <input
    type="search"
    placeholder="Search by ID or status..."
    class="searchInput5 | searchInput"
    oninput="search(5)"
  />
											<table class="rwd-table">
    <tbody>
      <tr>
        <th>Order ID</th>
        <th>Order Status</th>
        <th>Order Date</th>
        <th>Total Cost</th>
        <th>Payment Status</th>

      </tr>
      {
  orders.length === 0
    ? 
        <h2 style="font-size: 1.5rem; text-align: center; margin-bottom: 1rem;">No orders yet</h2>
     
    : orders.map((order:Order) => {
            const createdAtLocal = new Date(order.createdAt).toLocaleString();
      return (
     <tr class="data5">
     <td data-th="ID">{order.order_uuid}</td>
     <td data-th="Name">{order.order_status} </td>
     <td data-th="Order Date">{createdAtLocal}</td>
     <td data-th="Total Cost">
     <span class="price-tag"><span class="price">{order.total_price_amount}</span></span>
     </td>
     <td data-th="Payment Status">{order.payment_status} </td>

      </tr>
      )}
  ) }
    </tbody>
  </table>
							</section>

}
  {is_admin == true ? 
  <section id="tab-3" class="tab-body entry-content ">
                <div class="cta-admin-buttons | add-delete-btns">
      <a class="add-button" href="/products/createproduct" > Create a product</a>
      <button class="deleteProducts" >Delete All Products</button>
    </div>
  <input
    type="search"
    placeholder="Search by name or ID..."
    class="searchInput3 | searchInput"
    oninput="search(3)"
  />
											<table class="rwd-table">
    <tbody>
      <tr>
        <th>Image</th>
        <th>ID</th>
        <th>Name</th>
        <th>Category / Price</th>
        <th>Quantity / Rating</th>

        <th>Actions</th>
      </tr>
       {
     products.map((product: Product) =>
     <tr class="data3">
      <td data-th="Image"> <a href={`/products/getProduct/${product.category}/${product.uuid}`}><img src={product.image_src} alt={product.name} />  </a> </td>
     <td data-th="ID">{product.uuid}</td> 
     <td data-th="Name">{product.name}</td>
     <td data-th="Category / Price">{product.category} / ${product.price}</td>
     <td data-th="Quantit / Rating">{product.quantity} / {product.average_rating}</td>
     <td  data-th="Actions">
            <div class="cta-admin-buttons">
    <a href={`/products/editProduct/${product.uuid}`}>Edit</a>
   <button class="delete-product" data-product-id={product.uuid}> Delete</button>
  </div>
        </td>
      </tr>
     )
 }
    </tbody>
  </table>
		</section>
  : null }

  {
    is_admin === true ? 
     <section id="tab-4" class="tab-body entry-content ">
                <div class="cta-admin-buttons | add-delete-btns">
      <a class="add-button" href="/auctions/createAuction" > Create an Auction</a>
      <button class="deleteAuctions" >Delete All Auctions</button>
    </div>
    <input
    type="search"
    placeholder="Search by name or ID..."
    class="searchInput4 | searchInput"
    oninput="search(4)"
  />
											<table class="rwd-table">
    <tbody>
      <tr>
        <th>Image</th>

        <th>ID</th>
        <th>Name</th>
        <th>Start // End Time</th>
        <th>â„– of bids / Highest Bid / Highest Bidder</th>
        <th>Initial Price / Min bid increment %</th>
        <th>Actions</th>
      </tr>
       {
     auctions.map(async (auction: Auction) => {
        const productResponse: Response = await GetProduct(auction.product_uuid);
  const product: Product = await productResponse.json(); 
  const userResponse: Response = await getUser(auction.current_highest_bidder);
  const user: User = await userResponse.json(); 
   return (
     <tr class="data4">
      <td data-th="Image"> <a href={`/auctions/getAuction/${auction.auction_uuid}`}><img src={product.image_src} alt={product.name} />  </a> </td>
     <td data-th="ID">{auction.auction_uuid}</td> 
     <td data-th="Name">{auction.name}</td>
     <td data-th="Start // End Time">{new Date(auction.start_time).toLocaleString("en-GB")} // {new Date(auction.end_time).toLocaleString("en-GB")}</td>
     <td data-th="â„– of bids / Highest Bid / Highest Bidder">{auction.current_highest_bid ? `${auction.bid_counter} / $${auction.current_highest_bid} / ${user.username}` : "No bids yet!"}</td>
     <td data-th="Initial Price / Min bid increment %">${auction.initial_price} / {auction.minimum_bid_increment_percentage}% </td>
     <td  data-th="Actions">
            <div class="cta-admin-buttons">
    <a href={`/auctions/editAuction/${auction.auction_uuid}`}>Edit</a>
   <button class="delete-auction" data-auction-id={auction.auction_uuid}> Delete</button>
  </div>
        </td>
      </tr>
     )
    })
  }
    </tbody>
  </table>
		</section>
    : null  }
              	<section id="tab-5" class="tab-body entry-content">
			<UserCard
      uuid={user.uuid}
      username={user.username}
      first_name={user.first_name}
      last_name={user.last_name}
      email_adress={user.email_adress}
      phone_number={user.phone_number}
      gender={user.gender}
      />
							</section>
						</div>
					</div>
				</div>
			</section>
    
      <script is:inline>
        async function handleUpdateStatus(button){
 const order_uuid = button.id.replace('update', '');
    const order_status = document.querySelector(`#status${order_uuid}`).value
    if(order_status !== 'shipped' && order_status !== 'delivered' && order_status !== 'completed') return alert("Choose one of the order statuses!")
    await fetch(`/api/orders/updateOrderStatus/${order_uuid}`,{
      method: 'PUT',
      headers:{
        'content-type': 'application/json'
      },
      body: JSON.stringify({order_status})
    })
    location.reload();
  }
      </script>
      <style is:inline>
        .searchInput{
          padding: .35rem 1.5rem;
          width: 80%;
          margin-left: clamp(2rem, 8vw, 20rem);
          margin-block: 1.5rem;
        }
  .update-status-btn.update-status-btn{
    cursor: pointer;
    padding: .15rem;
    border-radius: .25rem;
  }
  .header-links{
    top: 0;
    position:sticky;
    z-index: 99;
  }
      </style>
<style>
  *,*::before,*::after{
    margin: 0;
    padding: 0;
    box-sizing: border-box;
  }

    body{
       background-color: hsl(0, 0%, 95%);
       font-family: Arial, Helvetica, sans-serif;
    }

 img{
        max-width: 100%;
        width: 130px;
        height: 85px;
        @media(width < 900px){
            width:195px;
            height: 150px;
        }
    }
    [astro-icon]{
        width: 40px;
    }
    td[data-th="Order Status"] span{
      padding-inline: .15rem;
      background-color: orange;
      border-radius: 100vmax;
    }

    :root{
 --tab-width: 144px;
    }
/**
 * Tabs
 */
.tabs {
	display: flex;
    flex-direction: column;
}

.tabs > ul {
  display: none;
	list-style-type: none;
 margin-top: 2rem;
  width: 80%;
    margin-inline: auto;
}

.tabs > ul li {
	display: block;
}

.tabs > ul li:not(:last-child) {
	border-bottom: 1px solid #262626;
}

.tabs > ul li a,
.tabs > ul li a:visited {
	display: flex;
    justify-content: center;
    gap: .95rem;
	border-bottom: none;
	text-decoration: none;
	background-color: #000;
	color: #fff;
	padding: 1rem 1rem;
	transition: all 0.2s ease-in-out;
	word-wrap: break-word;
}

.tabs > ul li a:hover,
.tabs > ul li a:focus,
.tabs > ul li a:active {
	border-bottom: none;
	outline: 0;
}

.tabs > ul li a.active {
	background-color: #fff;
	color: #0067b8;
}

.tabs > ul li a:hover:not(.active) {
	color: #0067b8;
}

.tabs > ul li a > span {
	width: 100%;
	display: flex;
	align-items: center;
	justify-content: center;
	text-align: center;
}

.tabs > ul li a > span.tab-label {
	display: none;
}

.tabs section {
	width: 100%;
	background-color: #fff;
	padding: 1rem;
	display: none;
	word-wrap: break-word;
	border-bottom: 6px solid #0067b8;
}

.tabs section > * {
	opacity: 0;
	transform: translateY(20px);
	transition: opacity 0.2s, transform 0.2s;
}

.tabs section.active {
	display: block;
}

.tabs section.active-content > * {
	opacity: 1;
	transform: translateY(0);
}
@media (min-width: 576px) {
     .tabs{
    flex-direction: row;
 }
	.tabs > ul {
		width: var(--tab-width);
	}

	.tabs > ul li a {
		flex-wrap: wrap;
	}

	.tabs > ul li a > span {
		width: 100%;
	}

	.tabs > ul li a > span.tab-label {
		width: 100%;
		display: block;
		margin-top: 0.2rem;
	}

	.tabs section {
		width: calc(100% - var(--tab-width));
		padding: 1rem;
	}
}
@media (min-width: 768px) {
	body {
		font-size: 1.05rem;
	}

	.tabs-container {
		padding-inline: .5rem;
    margin-top: .5rem;
	}
}
@media (min-width: 992px) {

	.tabs {
		width: 100%;
    	}
}

.rwd-table {
  margin-inline: auto;
  width: clamp(280px, 85vw, 100%);
  border-collapse: collapse;
}
.rwd-table tr:first-child {
  background: #fff;
  color: black;
  border-bottom: 2px solid black;
}

.rwd-table tr {
  border: 1px solid #ddd;
  border-bottom: 1px solid #ddd;
  background-color: #fff;
}
.rwd-table th{
    border: 1px solid #ddd;
  
}
.rwd-table tr:nth-child(odd):not(:first-child) {
  background-color: hsl(0, 0%, 95%);
}

.rwd-table th {
  display: none;
}

.rwd-table td {
  border-inline: 1px solid hsl(0, 0%, 70%)
  ;
}

.rwd-table td:first-child {
  margin-top: .5em;
}

.rwd-table td:last-child {
  margin-bottom: .5em;
}
.rwd-table td{
    display: flex;
    flex-direction: column;
    align-items: center;
}
.rwd-table td:before {
  content: attr(data-th) ": ";
  font-weight: bold;
  width: 200px;
  display: inline-block;
  color: #000;
}

.rwd-table th,
.rwd-table td {
  text-align: center;
}



@media screen and (max-width: 601px) {
  .rwd-table tr:nth-child(2) {
    border-top: none;
  }
}
@media screen and (min-width: 900px) {
  .rwd-table tr:hover:not(:first-child) {
    transition: .25s;
  background-color: hsl(0, 0%, 85%);
  }
  .rwd-table td:before {
    display: none;
  }
  .rwd-table th,
  .rwd-table td {
    display: table-cell;
  }

  .rwd-table th,
  .rwd-table td {
    padding: .3em !important;
  }
}
.cta-admin-buttons{
    display: flex;
    flex-direction: column;
    gap: .5rem;
    justify-content: center;
    @media (width < 900px){
        flex-direction: row;
        margin-top: .5rem;
        gap: 1rem;
    }
    & a, button{
        text-decoration: none;
        color: black;
        background-color: hsl(39, 100%, 50%);
        padding: .3rem;
        border-radius: .5rem;
        transition: .3s;
    }
    & button{
      cursor: pointer;
      border: transparent;
     font-size: 1rem;
    }
    & a:where(:hover, :focus-visible){
        background-color: hsl(39, 100%, 80%);
    }
    & button:where(:hover, :focus-visible){
        background-color: hsl(39, 100%, 80%);
    }
}
.add-delete-btns{
    display: flex;
  flex-direction: row;
  gap: 1rem;
}
</style>


<script>
  // Define the event handler function
async function handleDeleteAllProducts() {
  const result = window.confirm("Are you sure you want to delete all of the products?");
  if (result !== true) return;
 const finalResult =  window.confirm("Are you absolutely sure you want to do that?");
   if (finalResult !== true) return;
  const response = await fetch("/api/products/deleteAllProducts", {
    method: "DELETE",
  });

  if (response.ok) {
    alert("All products deleted successfully.");
    location.href = '/';
  } else {
    const responseData = await response.json();
    alert(`Error: ${responseData.error}`);
  }
}

    // Define the event handler function
async function handleDeleteAllAuctions() {
  const result = window.confirm("Are you sure you want to delete all of the auctions?");
  if (result !== true) return;
 const finalResult =  window.confirm("Are you absolutely sure you want to do that?");
   if (finalResult !== true) return;
  const response = await fetch("/api/auctions/deleteAllAuctions", {
    method: "DELETE",
  });

  if (response.ok) {
    alert("All auctions deleted successfully.");
    location.href = '/';
  } else {
    const responseData = await response.json();
    alert(`Error: ${responseData.error}`);
  }
}
document.addEventListener("astro:page-load",()=>{
  const deleteButton = document.querySelector(".deleteAuctions");
  if (!deleteButton) return;

  deleteButton.removeEventListener("click", handleDeleteAllAuctions);
  deleteButton.addEventListener("click", handleDeleteAllAuctions);
})

  document.addEventListener('astro:page-load', function() {
  // Variables
 const tabLinks = document.querySelectorAll('#tabs-section .tab-link');
 const tabBodies = document.querySelectorAll('#tabs-section .tab-body');
 const ul = document.querySelector(".tabs > ul") as HTMLUListElement; if(!ul) return;
 let timerOpacity;

     const activeTab = localStorage.getItem('activeTab') || '#tab-5';
      // Opacity Transition Class
             timerOpacity = setTimeout(() => {
                 ul.style.display = 'block'
             }, 10);
     if (activeTab) {
         // Set active tab from localStorage
         tabLinks.forEach(function(link) {
             link.classList.remove('active');
             if (link.getAttribute('href') === activeTab) {
                 link.classList.add('active');
             }
         });
         tabBodies.forEach(function(tabBody) {
             tabBody.classList.remove('active', 'active-content');
             if (`#${tabBody.id}` === activeTab) {
                 tabBody.classList.add('active', 'active-content');
             }
         });
     }

     // Menu Click
     tabLinks.forEach(function(link) {
         link.addEventListener('click', function(e) {
             // Prevent Default
             e.preventDefault();
             e.stopPropagation();

             // Clear Timers
             clearTimeout(timerOpacity);

             // Toggle Class Logic
             // Remove Active Classes
             tabLinks.forEach(function(tabLink) {
                 tabLink.classList.remove('active');
             });
             tabBodies.forEach(function(tabBody) {
                 tabBody.classList.remove('active', 'active-content');
             });

             // Add Active Classes
             this.classList.add('active');
             const targetBody = document.querySelector(this.getAttribute('href'));
             if (targetBody) {
                 targetBody.classList.add('active');
             }

             // Store active tab in localStorage
             localStorage.setItem('activeTab', this.getAttribute('href'));

             // Opacity Transition Class
             timerOpacity = setTimeout(() => {
                 if (targetBody) {
                     targetBody.classList.add('active-content');
                 }
             }, 100);
         });
     });
   


      async function handleDeleteProduct(event: Event) {
  const productUUID = (event.target as HTMLElement).getAttribute('data-product-id');
  const result = window.confirm('Are you sure you want to delete this product?');
  if (result !== true) return;
  const response = await fetch(`/api/products/deleteProduct/${productUUID}`, {
    method: 'DELETE',
  });
  if (response.ok) {
    const productCard = (event.target as HTMLElement).closest('tr');
    productCard && productCard.remove();
  } else {
    const responseData = await response.json();
    alert(`Error: ${responseData.error}`);
  }
}

  const deleteProductButtons = document.querySelectorAll('.delete-product');
 deleteProductButtons.forEach(button => {
    button.removeEventListener('click', handleDeleteProduct);
    button.addEventListener('click', handleDeleteProduct);
  });
    const deleteButton = document.querySelector(".deleteProducts");
  if (!deleteButton) return;

  deleteButton.removeEventListener("click", handleDeleteAllProducts);
  deleteButton.addEventListener("click", handleDeleteAllProducts);
});

  async function handleDeleteAuction(event: Event) {
    const auctionUUID = (event.target as HTMLElement).getAttribute('data-auction-id');
    const result = window.confirm('Are you sure you want to delete this auction?');
    if (result !== true) return;
    const response = await fetch(`/api/auctions/deleteAuction/${auctionUUID}`, {
      method: 'DELETE',
    });
    if (response.ok) {
      const auctionCard = (event.target as HTMLElement).closest('.auction');
      auctionCard && auctionCard.remove(); 
      location.reload();
    } else {
      const responseData = await response.json();
      alert(`Error: ${responseData.error}`);
    }
  } 

  const deleteProductButtons = document.querySelectorAll('.delete-auction');
  deleteProductButtons.forEach(button => {
    button.removeEventListener('click', handleDeleteAuction);
    button.addEventListener('click', handleDeleteAuction);
  });

  const deleteBtns = document.querySelectorAll(".delete-user-btn") as NodeListOf<HTMLButtonElement>;
  deleteBtns.forEach(deleteBtn =>{
    const uuid = deleteBtn.getAttribute("data-product-id") as string;
    deleteBtn.removeEventListener('click',() => handleDeleteUser(uuid))
    deleteBtn.addEventListener('click', () => handleDeleteUser(uuid));
  })

 async function handleDeleteUser(uuid: string){
  const confirmWindowResult = window.confirm('Are you sure you want to delete this account?');
	if(confirmWindowResult !== true) return;

    try{
	 const response = await fetch(`/api/users/deleteUser/${uuid}`, {
      method: "DELETE",
    });

    if (!response.ok) {
      const errorData = await response.json();
      alert(`Error: ${errorData.error}`);
    } else {
      const responseData = await response.json();
      alert(responseData.message);
    }
  } catch (error) {
    console.error("Error:", error);
    alert("An unexpected error occurred.");
  }

   const response = await fetch("/api/users/miscellaneous/deleteCookie", {
      method: "GET",
      headers: {
        'Content-Type': 'application/json',
      },
    });
    if (!response.ok) {
      const errorData = await response.json();
      alert(`Error: ${errorData.error}`);
    } else {
		location.href = '/';

    }
 }
</script>
<script is:inline>
//search
function search(number) {
  const searchTerm = document.querySelector(`.searchInput${number}`).value.toLowerCase();
  
  const tableRows = document.querySelectorAll(`.rwd-table tbody .data${number}`);
    for (i = 0; i < tableRows.length; i++) {
      const name = tableRows[i].querySelector('td[data-th="Name"]').textContent;
     const id = tableRows[i].querySelector('td[data-th="ID"]').textContent;
     if (!name.toLowerCase().includes(searchTerm) && !id.toLowerCase().includes(searchTerm)) {
      tableRows[i].style.display = "none";
    }
    else {
      tableRows[i].style.display = "";
    }
  }
}

</script>